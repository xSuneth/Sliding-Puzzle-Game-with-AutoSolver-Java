/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package PuzzleGame;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import javax.swing.JOptionPane;

/**
 *
 * @author Suneth Chathuranga
 */
public class GameBoard extends javax.swing.JFrame {

    public static final int GRIDSIZE = 2;
    public static final int NUMBER_OF_BUTTONS = GRIDSIZE*GRIDSIZE;

    
    String [] solutionArray;

    List <BoardButton> boardButtons = new ArrayList<>();

    /**
     * Creates new form Game
     */
    public GameBoard() {
        initComponents();

        // initBoardButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boardPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        boardPanel.setLayout(new java.awt.GridLayout(GRIDSIZE, GRIDSIZE));
        getContentPane().add(boardPanel, java.awt.BorderLayout.LINE_START);
        initBoardButtons();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        initializeTheSolutionArray();
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    // public static void main(String args[]) {
    //     /* Set the Nimbus look and feel */
    //     //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    //     /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
    //      * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
    //      */
    //     try {
    //         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
    //             if ("Nimbus".equals(info.getName())) {
    //                 javax.swing.UIManager.setLookAndFeel(info.getClassName());
    //                 break;
    //             }
    //         }
    //     } catch (ClassNotFoundException ex) {
    //         java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     } catch (InstantiationException ex) {
    //         java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     } catch (IllegalAccessException ex) {
    //         java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     } catch (javax.swing.UnsupportedLookAndFeelException ex) {
    //         java.util.logging.Logger.getLogger(GameBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //     }
    //     //</editor-fold>
    //     //</editor-fold>
    //     //</editor-fold>
    //     //</editor-fold>
    //     //</editor-fold>
    //     //</editor-fold>
    //     //</editor-fold>
    //     //</editor-fold>

    //     /* Create and display the form */
    //     java.awt.EventQueue.invokeLater(new Runnable() {
    //         public void run() {
    //             new GameBoard().setVisible(true);
    //         }
    //     });
    // }

    public void buttonFunction(BoardButton button) {
        int buttonIndex = boardButtons.indexOf(button);
    
        // Check if the button can be moved to the right
        if (buttonIndex + 1 < boardButtons.size() && boardButtons.get(buttonIndex + 1).getText().equals("")) {
            swapButtons(buttonIndex, buttonIndex + 1);
        }
        // Check if the button can be moved to the left
        else if (buttonIndex - 1 >= 0 && boardButtons.get(buttonIndex - 1).getText().equals("")) {
            swapButtons(buttonIndex, buttonIndex - 1);
        }
        // Check if the button can be moved down
        else if (buttonIndex + GRIDSIZE < boardButtons.size() && boardButtons.get(buttonIndex + GRIDSIZE).getText().equals("")) {
            swapButtons(buttonIndex, buttonIndex + GRIDSIZE);
        }
        // Check if the button can be moved up
        else if (buttonIndex - GRIDSIZE >= 0 && boardButtons.get(buttonIndex - GRIDSIZE).getText().equals("")) {
            swapButtons(buttonIndex, buttonIndex - GRIDSIZE);
        }
    }
    
    private void swapButtons(int index1, int index2) {
        BoardButton button1 = boardButtons.get(index1);
        BoardButton button2 = boardButtons.get(index2);
        button2.setText(button1.getText());
        button1.setText("");

        isPuzzleSolved();
    }

    
    
    public void initializeTheSolutionArray(){
        solutionArray = new String [NUMBER_OF_BUTTONS];

        int index=0;
        for(int i=0; i<GRIDSIZE; i++){ 
        if(i%2==0){
            for(int j=(i*GRIDSIZE)+1; j<((i+1)*GRIDSIZE)+1; j++){ 
                solutionArray[index] = Integer.toString(j);
                index++;
                System.out.println(j);
            }
            
        }
        else{
            for(int j=(i+1)*GRIDSIZE; j>(i*GRIDSIZE); j--){ 
                solutionArray[index] = Integer.toString(j);
                index++;
                System.out.println(j);
        }

        solutionArray[(GRIDSIZE%2==0)? NUMBER_OF_BUTTONS-(GRIDSIZE) : NUMBER_OF_BUTTONS-1] = "";
            
        }

        
    }
    System.out.println("Solusion Array Generated Succesfull!");
    }

    public boolean isPuzzleSolved() {
        // Iterate through the buttons and compare their text with the correct order
        for (int i = 0; i < boardButtons.size(); i++) {
            if (!boardButtons.get(i).getText().equals(solutionArray[i])) {
                return false; // Puzzle is not in correct order
            }
        }
        JOptionPane.showMessageDialog(null,"You Won!", "Congratulations!",JOptionPane.OK_CANCEL_OPTION );
        System.out.println("You Won");
        return true; // Puzzle is in correct order
    }
    
    








    public void initBoardButtons(){

        ActionListener buttonListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Get the source of the event, which is the button clicked
                BoardButton clickedButton = (BoardButton) e.getSource();
                // Perform the desired action when a button is clicked
                // For example, you can print the text of the clicked button
                System.out.println("Button clicked: " + clickedButton.getText());
                buttonFunction(clickedButton);
            }
        };

        for(int j=1; j<=NUMBER_OF_BUTTONS; j++){
            BoardButton newButton = new BoardButton();
            newButton.setText(Integer.toString(j));
            newButton.setPreferredSize(new Dimension(100,100));
            newButton.setBackground(Color.BLUE);
            newButton.setFont(new Font("Arial", Font.BOLD, 20));
            newButton.setForeground(Color.WHITE);
            newButton.addActionListener(buttonListener);
            boardButtons.add(newButton);
            
        }
       // Collections.shuffle(boardButtons);


        boardButtons.get(boardButtons.size()-1).setText("");



        for(BoardButton button : boardButtons){
            boardPanel.add(button);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardPanel;
    // End of variables declaration//GEN-END:variables
}
