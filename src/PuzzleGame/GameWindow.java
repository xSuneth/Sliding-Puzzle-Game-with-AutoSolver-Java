/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package PuzzleGame;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

/**
 *
 * @author Suneth Chathuranga
 */
public class GameWindow extends javax.swing.JFrame {

    public static final int GRIDSIZE = 4;

    List <BoardButton> boardButtons = new ArrayList<>();

    /**
     * Creates new form Game
     */
    public GameWindow() {
        initComponents();
        // initBoardButtons();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boardPanel = new javax.swing.JPanel();
        detailsPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        boardPanel.setLayout(new java.awt.GridLayout(4, 4));
        getContentPane().add(boardPanel, java.awt.BorderLayout.LINE_START);
        initBoardButtons();

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout detailsPanelLayout = new javax.swing.GroupLayout(detailsPanel);
        detailsPanel.setLayout(detailsPanelLayout);
        detailsPanelLayout.setHorizontalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        detailsPanelLayout.setVerticalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailsPanelLayout.createSequentialGroup()
                .addContainerGap(245, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(74, 74, 74))
        );

        getContentPane().add(detailsPanel, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameWindow().setVisible(true);
            }
        });
    }

    public void buttonFunction(BoardButton button) {
        int buttonIndex = boardButtons.indexOf(button);
    
        // Check if the button can be moved to the right
        if (buttonIndex + 1 < boardButtons.size() && boardButtons.get(buttonIndex + 1).getText().equals("")) {
            swapButtons(buttonIndex, buttonIndex + 1);
        }
        // Check if the button can be moved to the left
        else if (buttonIndex - 1 >= 0 && boardButtons.get(buttonIndex - 1).getText().equals("")) {
            swapButtons(buttonIndex, buttonIndex - 1);
        }
        // Check if the button can be moved down
        else if (buttonIndex + GRIDSIZE < boardButtons.size() && boardButtons.get(buttonIndex + GRIDSIZE).getText().equals("")) {
            swapButtons(buttonIndex, buttonIndex + GRIDSIZE);
        }
        // Check if the button can be moved up
        else if (buttonIndex - GRIDSIZE >= 0 && boardButtons.get(buttonIndex - GRIDSIZE).getText().equals("")) {
            swapButtons(buttonIndex, buttonIndex - GRIDSIZE);
        }
    }
    
    private void swapButtons(int index1, int index2) {
        BoardButton button1 = boardButtons.get(index1);
        BoardButton button2 = boardButtons.get(index2);
        String tempText = button1.getText();
        button1.setText(button2.getText());
        button2.setText(tempText);
    }
    



    public void initBoardButtons(){

        ActionListener buttonListener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Get the source of the event, which is the button clicked
                BoardButton clickedButton = (BoardButton) e.getSource();
                // Perform the desired action when a button is clicked
                // For example, you can print the text of the clicked button
                System.out.println("Button clicked: " + clickedButton.getText());
                buttonFunction(clickedButton);
            }
        };







        for(int j=1; j<=GRIDSIZE*GRIDSIZE; j++){
            BoardButton newButton = new BoardButton();
            newButton.setText(Integer.toString(j));
            newButton.setPreferredSize(new Dimension(100,100));
            newButton.setBackground(Color.BLUE);
            newButton.setFont(new Font("Arial", Font.BOLD, 20));
            newButton.setForeground(Color.WHITE);
            newButton.addActionListener(buttonListener);
            boardButtons.add(newButton);
            
        }
        Collections.shuffle(boardButtons);



        boardButtons.get(boardButtons.size()-1).setText("");



        for(BoardButton button : boardButtons){

            boardPanel.add(button);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardPanel;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
